#!/usr/bin/env ruby
#
# BioRuby vcf plugin 
# Author:: Pjotr Prins
#
# Copyright (C) 2014 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = "Vcf parser"

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

require 'bio-vcf'
require 'optparse'
require 'timeout'
require 'fileutils'
require 'tempfile'

# Uncomment when using the bio-logger 
# require 'bio-logger'
# log = Bio::Log::LoggerPlus.new 'vcf'
# log.outputters = Bio::Log::Outputter.stderr 
# Bio::Log::CLI.logger('stderr')
# Bio::Log::CLI.trace('info')

options = { show_help: false, source: 'https://github.com/CuppenResearch/bioruby-vcf', version: version+' (Pjotr Prins)', date: Time.now.to_s, thread_lines: 100_000 }
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\ne.g.  #{File.basename($0)} < test/data/input/somaticsniper.vcf"

  o.on('-i','--ignore-missing', 'Ignore missing data') do 
    options[:ignore_missing] = true
  end
  o.on('--filter cmd',String, 'Evaluate filter on each record') do |cmd|
    options[:filter] = cmd
  end

  o.on('--sfilter cmd',String, 'Evaluate filter on each sample') do |cmd|
    options[:sfilter] = cmd
  end
  o.on("--sfilter-samples list", Array, "Filter on selected samples (e.g., 0,1") do |l|
    options[:sfilter_samples] = l
  end

  o.on('--ifilter cmd','--if cmd',String, 'Include filter') do |cmd|
    options[:ifilter] = cmd
  end
  o.on("--ifilter-samples list", Array, "Include set - implicitely defines exclude set") do |l|
    options[:ifilter_samples] = l
  end

  o.on('--efilter cmd','--ef cmd',String, 'Exclude filter') do |cmd|
    options[:efilter] = cmd
  end
  o.on("--efilter-samples list", Array, "Exclude set - overrides exclude set") do |l|
    options[:efilter_samples] = l
  end

  o.on('-e cmd', '--eval cmd',String, 'Evaluate command on each record') do |cmd|
    options[:eval] = cmd
  end
  o.on('--eval-once cmd',String, 'Evaluate command once (usually for header info)') do |cmd|
    options[:eval_once] = true
    options[:eval] = cmd
  end
  o.on('--seval cmd',String, 'Evaluate command on each sample') do |cmd|
    options[:seval] = cmd
    options[:skip_header] = true
  end
  o.on("--rewrite eval", "Rewrite INFO") do |s|
    options[:rewrite] = s
  end
  o.on("--samples list", Array, "Output selected samples") do |l|
    options[:samples] = l
  end
  o.on("--rdf", "Generate Turtle RDF") do |b|
    require 'bio-vcf/vcfrdf'
    options[:rdf] = true
    options[:skip_header] = true
  end
  o.on("--num-threads [num]", Integer, "Multi-core version") do |i|
    options[:num_threads] = i
  end
  o.on("--thread-lines num", Integer, "Fork thread on num lines (default 100_000)") do |i|
    options[:thread_lines] = i
  end
  o.on_tail("--id name", String, "Identifier") do |s|
    options[:id] = s
  end
  o.on_tail("--tags list", String, "Add tags") do |s|
    options[:tags] = s
  end
 
  o.on("--skip-header", "Do not output VCF header info") do 
    options[:skip_header] = true
  end

  o.on("--set-header list", Array, "Set a special tab delimited output header (#samples expands to sample names)") do |list|
    options[:set_header] = list
    options[:skip_header] = true
  end
   
  # Uncomment the following when using the bio-logger 
  # o.separator ""
  # o.on("--logger filename",String,"Log to file (default stderr)") do | name |
  #   Bio::Log::CLI.logger(name)
  # end
  #
  # o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
  #   Bio::Log::CLI.trace(s)
  # end
  # 
  o.on("-q", "--quiet", "Run quietly") do |q|
    # Bio::Log::CLI.trace('error')
    options[:quiet] = true
  end
   
  o.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end
  
  # o.on("--debug", "Show debug messages") do |v|
  #   Bio::Log::CLI.trace('debug')
  # end

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

include BioVcf

# Parse the header section of a VCF file
def parse_header line, samples, options
  header = VcfHeader.new
  header.add(line)
  print line if not options[:skip_header]
  STDIN.each_line do | headerline |
    if headerline !~ /^#/
      line = headerline
      break # end of header
    end
    header.add(headerline)
    if not options[:skip_header]
      if headerline =~ /^#CHR/
        # The header before actual data contains the sample names, first inject the BioVcf meta information
        print header.tag(options),"\n" if not options[:skip_header]
        selected = header.column_names
        if samples
          newfields = selected[0..8]
          samples.each do |s|
            newfields << selected[s+9] 
          end
          selected = newfields
        end
        print "#",selected.join("\t"),"\n"
      else
        print headerline
      end
    end
  end
  print header.printable_header_line(options[:set_header]),"\n" if options[:set_header]
  VcfRdf::header if options[:rdf]
  return header,line
end

# Parse a VCF line
def parse_line line,header,options,samples
  fields = VcfLine.parse(line)
  rec = VcfRecord.new(fields,header)
  r = rec # alias

  filter = options[:filter]
  sfilter = options[:sfilter]
  efilter = options[:efilter]
  ifilter = options[:ifilter]
  seval = options[:seval]
  ignore_missing = options[:ignore_missing]
  quiet = options[:quiet]

  if sfilter or efilter or ifilter or seval
    # check for samples
    header_samples = header.column_names[9..-1]
    raise "Empty sample list, can not execute query!" if not header_samples
  end

  # --------------------------
  # Filtering and set analysis
  return if filter and not rec.filter(filter,ignore_missing_data: ignore_missing,quiet: quiet)
  
  if sfilter
    rec.each_sample(options[:sfilter_samples]) do | sample |
      return if not sample.sfilter(sfilter,ignore_missing_data: ignore_missing,quiet: quiet)
    end
  end

  if ifilter
    # Skip if no matches
    iset = []
    rec.each_sample(options[:ifilter_samples]) do | sample |
      iset << sample.ifilter(ifilter,ignore_missing_data: ignore_missing,quiet: quiet)
    end
    return if not iset.index(true)
  end

  if efilter
    rec.each_sample(options[:efilter_samples]) do | sample |
      return if not sample.efilter(efilter,ignore_missing_data: ignore_missing,quiet: quiet)
    end
  end

  # -----------------------------
  # From here on decide on output
  if samples
    # Select certain samples for output
    newfields = fields[0..8]
    samples.each do |s|
      newfields << fields[s+9] 
    end
    fields = newfields
  end
  if options[:eval] or seval
    begin
      results = nil # result string
      if options[:eval] 
        res = rec.eval(options[:eval],ignore_missing_data: ignore_missing,quiet: quiet)
        results = res if res
      end
      if seval
        list = (results ? [] : [rec.chr,rec.pos])
        rec.each_sample(options[:sfilter_samples]) { | sample |
          list << sample.eval(seval,ignore_missing_data: ignore_missing,quiet: quiet)
        }
        results = (results ? results.to_s + "\t" : "" ) + list.join("\t")
      end
    rescue => e
      $stderr.print "\nLine: ",line
      $stderr.print "ERROR evaluating --eval <#{options[:eval]}> #{e.message}\n"
      raise if options[:verbose]
      exit 1
    end
    print results,"\n" if results
    exit(1) if options[:eval_once]
  else
    if options[:rdf]
      # Output Turtle RDF
      VcfRdf::record(options[:id],rec,options[:tags])
    elsif options[:rewrite]
      # Default behaviour prints VCF line, but rewrite info
      eval(options[:rewrite]) 
      print (fields[0..6]+[rec.info.to_s]+fields[8..-1]).join("\t")+"\n"
    else
      # Default behaviour prints VCF line
      $stdout.print fields.join("\t")+"\n"
      $stdout.flush
      return true
    end
  end
end

# Collect a buffer of lines and feed them to a thread
# Returns the created pid, tempfilen and count_threads
# (Note: this function should be turned into a closure)
def parse_lines lines,header,options,samples,tempdir,count_threads
  pid = nil
  threadfilen = nil
  if options[:num_threads]
    lines2 = lines.map { |l| l.clone }
    count_threads += 1
    threadfilen = tempdir+sprintf("/%0.6d-pid",count_threads)+'.bio-vcf'
    pid = fork do
      count_lines = 0
      tempfn = threadfilen+'.running'
      STDOUT.reopen(File.open(tempfn, 'w+'))
      lines2.each do | line |
        count_lines +=1 if parse_line(line,header,options,samples)
      end
      STDOUT.flush
      STDOUT.close
      FileUtils::mv(tempfn,threadfilen)
      exit 0
    end
    Process::detach(pid)
  else
    lines.each do | line |
      parse_line line,header,options,samples
    end
  end
  return pid,threadfilen,count_threads
end

# Make sure no more than num_threads are running at the same time
def manage_thread_pool(workers, thread_list, num_threads)
  while true
    # ---- count running pids
    running = thread_list.reduce(0) { | sum, thread_info | ( File.exist?(thread_info[1]+'.running') ? sum+1 : sum ) }
    break if running < num_threads
    sleep 0.1
  end
end

opts.parse!(ARGV)

$stderr.print "vcf #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2014\n" if !options[:quiet]

if options[:show_help] 
  print opts 
  print USAGE
  exit 1
end

if RUBY_VERSION =~ /^1/
  $stderr.print "WARNING: bio-vcf runs on Ruby 2.x only\n"
end

$stderr.print "Options: ",options,"\n" if !options[:quiet]

# Check for option combinations
raise "Missing option --ifilter" if options[:ifilter_samples] and not options[:ifilter]
raise "Missing option --efilter" if options[:efilter_samples] and not options[:efilter]
raise "Missing option --sfilter" if options[:sfilter_samples] and not options[:sfilter]

if options[:samples]
  samples = options[:samples].map { |s| s.to_i }
end

num_threads = options[:num_threads]
num_threads = 8 if num_threads != nil and num_threads < 2

header = nil
header_output_completed = false
line_number=0
lines = []
thread_list = []
workers = []
thread_lines = options[:thread_lines]
count_threads=0

orig_std_out = STDOUT.clone

begin

  Dir::mktmpdir("bio-vcf_") do |tempdir|
    $stderr.print "Using #{tempdir} for temporary files\n" if num_threads
     
    # ---- Main loop
    STDIN.each_line do | line |
      line_number += 1
      $stderr.print '.' if line_number % thread_lines == 0 and not options[:quiet]
      # ---- In this section header information is handled
      next if header_output_completed and line =~ /^#/
      if line =~ /^##fileformat=/ or line =~ /^#CHR/
        header,line = parse_header(line,samples,options)
      end
      next if line =~ /^##/ # empty file
      header_output_completed = true
      if not options[:efilter_samples] and options[:ifilter_samples]
        # Create exclude set as a complement of include set
        options[:efilter_samples] = header.column_names[9..-1].fill{|i|i.to_s}-options[:ifilter_samples]
      end

      # ---- In this section the VCF variant lines are parsed
      lines << line
      if lines.size > thread_lines
        manage_thread_pool(workers,thread_list,num_threads) if options[:num_threads]
        thread_list << parse_lines(lines,header,options,samples,tempdir,count_threads)
        count_threads = thread_list.last[2]
        lines = []
      end
    end

    thread_list << parse_lines(lines,header,options,samples,tempdir,count_threads)
    count_threads = thread_list.last[2]

    # ---- In this section the output gets collected and printed on STDOUT
    if options[:num_threads]
      STDOUT.reopen(orig_std_out)
      $stderr.print "Final pid=#{thread_list.last[0]}, size=#{lines.size}\n"
      lines = []

      fault = false
      # Wait for the running threads to complete
      thread_list.each do |info|
        (pid,threadfn) = info
        tempfn = threadfn + '.running'
        $stderr.print "Waiting up to 3 minutes for pid=#{pid} to complete\n"
        begin
          Timeout.timeout(180) do
            while not File.exist?(threadfn)  # wait for the result to appear
              sleep 0.2
            end
          end
          # Thread file should have gone:
          raise "FATAL: child process appears to have crashed #{tempfn}" if File.exist?(tempfn)
          $stderr.print "OK pid=#{pid}\n"
        rescue Timeout::Error
          Process.kill 9, pid
          Process.wait pid
          $stderr.print "FATAL: child process killed because it stopped responding, pid = #{pid}\n"
          fault = true
        end
      end
      # Collate the output
      thread_list.each do | info |
        (pid,fn) = info
        # This should never happen
        raise "FATAL: child process output #{fn} is missing" if not File.exist?(fn)
        $stderr.print "Reading #{fn}\n"
        File.new(fn).each_line { |buf|
          print buf
        }
        File.unlink(fn)
      end
      return 1 if fault
    end
  end  # cleans up tempdir

rescue Exception => e
  # $stderr.print line
  $stderr.print e.message,"\n"
  raise if options[:verbose]
  exit 1
end


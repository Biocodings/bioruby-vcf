#!/usr/bin/env ruby
#
# BioRuby vcf Plugin Biovcf
# Author:: Pjotr Prins
# Copyright:: 2013
#
# Copyright (C) 2014 Pjotr Prins <pjotr.prins@thebird.nl>

USAGE = "Vcf parser"

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

# print banner
$stderr.print "vcf #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2014\n"

require 'bio-vcf'
require 'optparse'

# Uncomment when using the bio-logger 
# require 'bio-logger'
# log = Bio::Log::LoggerPlus.new 'vcf'
# log.outputters = Bio::Log::Outputter.stderr 
# Bio::Log::CLI.logger('stderr')
# Bio::Log::CLI.trace('info')

options = { show_help: false}
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\ne.g.  #{File.basename($0)} --rdf < test/data/input/somaticsniper.vcf"

  o.on_tail('-e cmd', '--eval cmd',String, 'Evaluate command on each header section') do |cmd|
    options[:eval] = cmd
  end
  o.on("--rdf", "Generate RDF") do |b|
    options[:rdf] = true
  end
 
  # Uncomment the following when using the bio-logger 
  # o.separator ""
  # o.on("--logger filename",String,"Log to file (default stderr)") do | name |
  #   Bio::Log::CLI.logger(name)
  # end
  #
  # o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
  #   Bio::Log::CLI.trace(s)
  # end
  # 
  o.on("-q", "--quiet", "Run quietly") do |q|
    # Bio::Log::CLI.trace('error')
    options[:quiet] = true
  end
  # 
  # o.on("-v", "--verbose", "Run verbosely") do |v|
  #   Bio::Log::CLI.trace('info')
  # end
  # 
  # o.on("--debug", "Show debug messages") do |v|
  #   Bio::Log::CLI.trace('debug')
  # end

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

include BioVcf

begin
  opts.parse!(ARGV)

  if options[:show_help] 
    print opts 
    print USAGE
    exit 1
  end

  $stderr.print "Options: ",options if !options[:quiet]

  STDIN.each do | line |
    if line =~ /^##fileformat=/
      # ---- We have a new file header
      header = VcfHeader.new
      header.add(line)
      STDIN.each do | headerline |
        if headerline !~ /^#/
          line = headerline
          print eval(options[:eval]) if options[:eval] 
          break # end of header
        end
        header.add(headerline)
      end
      # ---- Parse VCF record line
      fields = VcfLine.parse(line,header.columns)
      p fields
    end
  end

end

